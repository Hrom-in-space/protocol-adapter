package mmock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// CBExecutorMock implements smartclient.CBExecutor
type CBExecutorMock struct {
	t minimock.Tester

	funcExecute          func(req func() (interface{}, error)) (p1 interface{}, err error)
	inspectFuncExecute   func(req func() (interface{}, error))
	afterExecuteCounter  uint64
	beforeExecuteCounter uint64
	ExecuteMock          mCBExecutorMockExecute
}

// NewCBExecutorMock returns a mock for smartclient.CBExecutor
func NewCBExecutorMock(t minimock.Tester) *CBExecutorMock {
	m := &CBExecutorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ExecuteMock = mCBExecutorMockExecute{mock: m}
	m.ExecuteMock.callArgs = []*CBExecutorMockExecuteParams{}

	return m
}

type mCBExecutorMockExecute struct {
	mock               *CBExecutorMock
	defaultExpectation *CBExecutorMockExecuteExpectation
	expectations       []*CBExecutorMockExecuteExpectation

	callArgs []*CBExecutorMockExecuteParams
	mutex    sync.RWMutex
}

// CBExecutorMockExecuteExpectation specifies expectation struct of the CBExecutor.Execute
type CBExecutorMockExecuteExpectation struct {
	mock    *CBExecutorMock
	params  *CBExecutorMockExecuteParams
	results *CBExecutorMockExecuteResults
	Counter uint64
}

// CBExecutorMockExecuteParams contains parameters of the CBExecutor.Execute
type CBExecutorMockExecuteParams struct {
	req func() (interface{}, error)
}

// CBExecutorMockExecuteResults contains results of the CBExecutor.Execute
type CBExecutorMockExecuteResults struct {
	p1  interface{}
	err error
}

// Expect sets up expected params for CBExecutor.Execute
func (mmExecute *mCBExecutorMockExecute) Expect(req func() (interface{}, error)) *mCBExecutorMockExecute {
	if mmExecute.mock.funcExecute != nil {
		mmExecute.mock.t.Fatalf("CBExecutorMock.Execute mock is already set by Set")
	}

	if mmExecute.defaultExpectation == nil {
		mmExecute.defaultExpectation = &CBExecutorMockExecuteExpectation{}
	}

	mmExecute.defaultExpectation.params = &CBExecutorMockExecuteParams{req}
	for _, e := range mmExecute.expectations {
		if minimock.Equal(e.params, mmExecute.defaultExpectation.params) {
			mmExecute.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmExecute.defaultExpectation.params)
		}
	}

	return mmExecute
}

// Inspect accepts an inspector function that has same arguments as the CBExecutor.Execute
func (mmExecute *mCBExecutorMockExecute) Inspect(f func(req func() (interface{}, error))) *mCBExecutorMockExecute {
	if mmExecute.mock.inspectFuncExecute != nil {
		mmExecute.mock.t.Fatalf("Inspect function is already set for CBExecutorMock.Execute")
	}

	mmExecute.mock.inspectFuncExecute = f

	return mmExecute
}

// Return sets up results that will be returned by CBExecutor.Execute
func (mmExecute *mCBExecutorMockExecute) Return(p1 interface{}, err error) *CBExecutorMock {
	if mmExecute.mock.funcExecute != nil {
		mmExecute.mock.t.Fatalf("CBExecutorMock.Execute mock is already set by Set")
	}

	if mmExecute.defaultExpectation == nil {
		mmExecute.defaultExpectation = &CBExecutorMockExecuteExpectation{mock: mmExecute.mock}
	}
	mmExecute.defaultExpectation.results = &CBExecutorMockExecuteResults{p1, err}
	return mmExecute.mock
}

// Set uses given function f to mock the CBExecutor.Execute method
func (mmExecute *mCBExecutorMockExecute) Set(f func(req func() (interface{}, error)) (p1 interface{}, err error)) *CBExecutorMock {
	if mmExecute.defaultExpectation != nil {
		mmExecute.mock.t.Fatalf("Default expectation is already set for the CBExecutor.Execute method")
	}

	if len(mmExecute.expectations) > 0 {
		mmExecute.mock.t.Fatalf("Some expectations are already set for the CBExecutor.Execute method")
	}

	mmExecute.mock.funcExecute = f
	return mmExecute.mock
}

// When sets expectation for the CBExecutor.Execute which will trigger the result defined by the following
// Then helper
func (mmExecute *mCBExecutorMockExecute) When(req func() (interface{}, error)) *CBExecutorMockExecuteExpectation {
	if mmExecute.mock.funcExecute != nil {
		mmExecute.mock.t.Fatalf("CBExecutorMock.Execute mock is already set by Set")
	}

	expectation := &CBExecutorMockExecuteExpectation{
		mock:   mmExecute.mock,
		params: &CBExecutorMockExecuteParams{req},
	}
	mmExecute.expectations = append(mmExecute.expectations, expectation)
	return expectation
}

// Then sets up CBExecutor.Execute return parameters for the expectation previously defined by the When method
func (e *CBExecutorMockExecuteExpectation) Then(p1 interface{}, err error) *CBExecutorMock {
	e.results = &CBExecutorMockExecuteResults{p1, err}
	return e.mock
}

// Execute implements smartclient.CBExecutor
func (mmExecute *CBExecutorMock) Execute(req func() (interface{}, error)) (p1 interface{}, err error) {
	mm_atomic.AddUint64(&mmExecute.beforeExecuteCounter, 1)
	defer mm_atomic.AddUint64(&mmExecute.afterExecuteCounter, 1)

	if mmExecute.inspectFuncExecute != nil {
		mmExecute.inspectFuncExecute(req)
	}

	mm_params := &CBExecutorMockExecuteParams{req}

	// Record call args
	mmExecute.ExecuteMock.mutex.Lock()
	mmExecute.ExecuteMock.callArgs = append(mmExecute.ExecuteMock.callArgs, mm_params)
	mmExecute.ExecuteMock.mutex.Unlock()

	for _, e := range mmExecute.ExecuteMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.p1, e.results.err
		}
	}

	if mmExecute.ExecuteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmExecute.ExecuteMock.defaultExpectation.Counter, 1)
		mm_want := mmExecute.ExecuteMock.defaultExpectation.params
		mm_got := CBExecutorMockExecuteParams{req}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmExecute.t.Errorf("CBExecutorMock.Execute got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmExecute.ExecuteMock.defaultExpectation.results
		if mm_results == nil {
			mmExecute.t.Fatal("No results are set for the CBExecutorMock.Execute")
		}
		return (*mm_results).p1, (*mm_results).err
	}
	if mmExecute.funcExecute != nil {
		return mmExecute.funcExecute(req)
	}
	mmExecute.t.Fatalf("Unexpected call to CBExecutorMock.Execute. %v", req)
	return
}

// ExecuteAfterCounter returns a count of finished CBExecutorMock.Execute invocations
func (mmExecute *CBExecutorMock) ExecuteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmExecute.afterExecuteCounter)
}

// ExecuteBeforeCounter returns a count of CBExecutorMock.Execute invocations
func (mmExecute *CBExecutorMock) ExecuteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmExecute.beforeExecuteCounter)
}

// Calls returns a list of arguments used in each call to CBExecutorMock.Execute.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmExecute *mCBExecutorMockExecute) Calls() []*CBExecutorMockExecuteParams {
	mmExecute.mutex.RLock()

	argCopy := make([]*CBExecutorMockExecuteParams, len(mmExecute.callArgs))
	copy(argCopy, mmExecute.callArgs)

	mmExecute.mutex.RUnlock()

	return argCopy
}

// MinimockExecuteDone returns true if the count of the Execute invocations corresponds
// the number of defined expectations
func (m *CBExecutorMock) MinimockExecuteDone() bool {
	for _, e := range m.ExecuteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ExecuteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterExecuteCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcExecute != nil && mm_atomic.LoadUint64(&m.afterExecuteCounter) < 1 {
		return false
	}
	return true
}

// MinimockExecuteInspect logs each unmet expectation
func (m *CBExecutorMock) MinimockExecuteInspect() {
	for _, e := range m.ExecuteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CBExecutorMock.Execute with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ExecuteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterExecuteCounter) < 1 {
		if m.ExecuteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CBExecutorMock.Execute")
		} else {
			m.t.Errorf("Expected call to CBExecutorMock.Execute with params: %#v", *m.ExecuteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcExecute != nil && mm_atomic.LoadUint64(&m.afterExecuteCounter) < 1 {
		m.t.Error("Expected call to CBExecutorMock.Execute")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CBExecutorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockExecuteInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CBExecutorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CBExecutorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockExecuteDone()
}
